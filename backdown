#!/usr/bin/env python3
import sys
import os.path
import sqlite3

def usage():
    print('Usage: %s <database file> show|prune' % sys.argv[0], file=sys.stderr)
    sys.exit(1)

if len(sys.argv) != 3 and len(sys.argv) != 4:
    usage()

if sys.argv[2] == 'show':
    # open read-only. FIXME escape name
    connection = sqlite3.connect('file:%s?mode=ro' % sys.argv[1])
    if len(sys.argv) == 4:
        prefix = sys.argv[3]
        # Funny, python 3 str is not necessarily UTF-8!
        # non-UTF8 arguments are handled by storing invalid parts as UTF-16 reserved codepoint.
        # but they're still instance of str (`isinstance(prefix, str):`)`
        prefix = bytes(prefix, 'utf-8', 'surrogateescape')
        after = bytearray(prefix)
        for i in range(len(after)-1, -1, -1):
            if after[i] == 255:
                after.pop()
            else:
                after[i] = after[i]+1
                break
        # print('after %s:' % prefix, after)
        result = connection.execute(
                'SELECT printable_path, modified, read_size FROM hashed WHERE path >= ? AND path <= ?',
                (prefix, after)
        )
    else:
        result = connection.execute('SELECT printable_path, modified, read_size FROM hashed')
    for printable, modified, size in result.fetchall():
        print('%s %s %d' % (printable.decode('utf-8'), modified, size))
elif sys.argv[2] == 'prune':
    with sqlite3.connect(sys.argv[1]) as connection:
        cursor = connection.cursor()
        result = cursor.execute('SELECT path, printable_path FROM hashed')
        deleted = []
        for path, printable in result.fetchall():
            if not os.path.isfile(path):
                print('pruning %s' % printable)
                deleted.append((path,))
        if len(deleted) == 0:
            print('all files still exist')
        else:
            cursor.executemany('DELETE FROM hashed WHERE path = ?', deleted)
            print('pruned %d files' % cursor.rowcount)
else:
    usage()
