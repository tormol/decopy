#!/usr/bin/env python3

# Copyright 2023 Torbj√∏rn Birch Moltu
#
# This file is part of Decopy.
# Decopy is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Decopy is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with Decopy.
# If not, see <https://www.gnu.org/licenses/>.

import sys
import os
import os.path
import urllib.parse
import sqlite3

def usage():
    print('Usage: %s <database file> scan|show|prune' % sys.argv[0], file=sys.stderr)
    sys.exit(1)

def connect_readonly(db_path):
    escaped = urllib.parse.quote(db_path)
    connection = sqlite3.connect('file:%s?mode=ro' % escaped)
    return connection

if len(sys.argv) > 2 and sys.argv[2] == 'scan':
    os.execvp('cargo', ['cargo', 'run', '--', '-d', sys.argv[1]] + sys.argv[3:])
elif (len(sys.argv) == 3 or len(sys.argv) == 4) and sys.argv[2] == 'show':
    # no need to properly close since readonly, I asume
    connection = connect_readonly(sys.argv[1])
    if len(sys.argv) == 4:
        prefix = sys.argv[3]
        # Funny, python 3 str is not necessarily UTF-8!
        # non-UTF8 arguments are handled by storing invalid parts as UTF-16 reserved codepoint.
        # but they're still instance of str (`isinstance(prefix, str):`)`
        prefix = bytes(prefix, 'utf-8', 'surrogateescape')
        after = bytearray(prefix)
        for i in range(len(after)-1, -1, -1):
            if after[i] == 255:
                after.pop()
            else:
                after[i] = after[i]+1
                break
        # print('after %s:' % prefix, after)
        result = connection.execute(
                'SELECT printable_path, modified, read_size FROM hashed WHERE path >= ? AND path <= ?',
                (prefix, after)
        )
    else:
        result = connection.execute('SELECT printable_path, modified, read_size FROM hashed')
    for printable, modified, size in result.fetchall():
        print('%s %s %d' % (printable.decode('utf-8'), modified, size))
elif len(sys.argv) == 3 and sys.argv[2] == 'prune':
    with sqlite3.connect(sys.argv[1]) as connection:
        cursor = connection.cursor()
        result = cursor.execute('SELECT path, printable_path FROM hashed')
        deleted = []
        for path, printable in result.fetchall():
            if not os.path.isfile(path):
                print('pruning %s' % printable)
                deleted.append((path,))
        if len(deleted) == 0:
            print('all files still exist')
        else:
            cursor.executemany('DELETE FROM hashed WHERE path = ?', deleted)
            print('pruned %d files' % cursor.rowcount)
else:
    usage()
